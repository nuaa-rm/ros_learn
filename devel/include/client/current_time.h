// Generated by gencpp from file client/current_time.msg
// DO NOT EDIT!


#ifndef CLIENT_MESSAGE_CURRENT_TIME_H
#define CLIENT_MESSAGE_CURRENT_TIME_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace client {
    template<class ContainerAllocator>
    struct current_time_ {
        typedef current_time_<ContainerAllocator> Type;

        current_time_()
                : name(), year(0), month(0), day(0), hour(0), minute(0), second(0) {
        }

        current_time_(const ContainerAllocator &_alloc)
                : name(_alloc), year(0), month(0), day(0), hour(0), minute(0), second(0) {
            (void) _alloc;
        }


        typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other> _name_type;
        _name_type name;

        typedef uint8_t _year_type;
        _year_type year;

        typedef uint8_t _month_type;
        _month_type month;

        typedef uint8_t _day_type;
        _day_type day;

        typedef uint8_t _hour_type;
        _hour_type hour;

        typedef uint8_t _minute_type;
        _minute_type minute;

        typedef uint8_t _second_type;
        _second_type second;


        typedef boost::shared_ptr<::client::current_time_<ContainerAllocator> > Ptr;
        typedef boost::shared_ptr<::client::current_time_<ContainerAllocator> const> ConstPtr;

    }; // struct current_time_

    typedef ::client::current_time_<std::allocator < void> >
    current_time;

    typedef boost::shared_ptr<::client::current_time> current_timePtr;
    typedef boost::shared_ptr<::client::current_time const> current_timeConstPtr;

// constants requiring out of line definition



    template<typename ContainerAllocator>
    std::ostream &operator<<(std::ostream &s, const ::client::current_time_<ContainerAllocator> &v) {
        ros::message_operations::Printer<::client::current_time_<ContainerAllocator> >::stream(s, "", v);
        return s;
    }


    template<typename ContainerAllocator1, typename ContainerAllocator2>
    bool operator==(const ::client::current_time_<ContainerAllocator1> &lhs,
                    const ::client::current_time_<ContainerAllocator2> &rhs) {
        return lhs.name == rhs.name &&
               lhs.year == rhs.year &&
               lhs.month == rhs.month &&
               lhs.day == rhs.day &&
               lhs.hour == rhs.hour &&
               lhs.minute == rhs.minute &&
               lhs.second == rhs.second;
    }

    template<typename ContainerAllocator1, typename ContainerAllocator2>
    bool operator!=(const ::client::current_time_<ContainerAllocator1> &lhs,
                    const ::client::current_time_<ContainerAllocator2> &rhs) {
        return !(lhs == rhs);
    }


} // namespace client

namespace ros {
    namespace message_traits {


        template<class ContainerAllocator>
        struct IsFixedSize<::client::current_time_<ContainerAllocator> >
                : FalseType {
        };

        template<class ContainerAllocator>
        struct IsFixedSize<::client::current_time_<ContainerAllocator> const>
                : FalseType {
        };

        template<class ContainerAllocator>
        struct IsMessage<::client::current_time_<ContainerAllocator> >
                : TrueType {
        };

        template<class ContainerAllocator>
        struct IsMessage<::client::current_time_<ContainerAllocator> const>
                : TrueType {
        };

        template<class ContainerAllocator>
        struct HasHeader<::client::current_time_<ContainerAllocator> >
                : FalseType {
        };

        template<class ContainerAllocator>
        struct HasHeader<::client::current_time_<ContainerAllocator> const>
                : FalseType {
        };


        template<class ContainerAllocator>
        struct MD5Sum<::client::current_time_<ContainerAllocator> > {
            static const char *value() {
                return "a6f5c81d6c9a9e6b4dd87b84cc2c41c6";
            }

            static const char *value(const ::client::current_time_<ContainerAllocator> &) { return value(); }

            static const uint64_t static_value1 = 0xa6f5c81d6c9a9e6bULL;
            static const uint64_t static_value2 = 0x4dd87b84cc2c41c6ULL;
        };

        template<class ContainerAllocator>
        struct DataType<::client::current_time_<ContainerAllocator> > {
            static const char *value() {
                return "client/current_time";
            }

            static const char *value(const ::client::current_time_<ContainerAllocator> &) { return value(); }
        };

        template<class ContainerAllocator>
        struct Definition<::client::current_time_<ContainerAllocator> > {
            static const char *value() {
                return "string name\n"
                       "\n"
                       "uint8 year\n"
                       "uint8 month\n"
                       "uint8 day\n"
                       "\n"
                       "uint8 hour\n"
                       "uint8 minute\n"
                       "uint8 second\n";
            }

            static const char *value(const ::client::current_time_<ContainerAllocator> &) { return value(); }
        };

    } // namespace message_traits
} // namespace ros

namespace ros {
    namespace serialization {

        template<class ContainerAllocator>
        struct Serializer<::client::current_time_<ContainerAllocator> > {
            template<typename Stream, typename T>
            inline static void allInOne(Stream &stream, T m) {
                stream.next(m.name);
                stream.next(m.year);
                stream.next(m.month);
                stream.next(m.day);
                stream.next(m.hour);
                stream.next(m.minute);
                stream.next(m.second);
            }

            ROS_DECLARE_ALLINONE_SERIALIZER
        }; // struct current_time_

    } // namespace serialization
} // namespace ros

namespace ros {
    namespace message_operations {

        template<class ContainerAllocator>
        struct Printer<::client::current_time_<ContainerAllocator> > {
            template<typename Stream>
            static void
            stream(Stream &s, const std::string &indent, const ::client::current_time_<ContainerAllocator> &v) {
                s << indent << "name: ";
                Printer<std::basic_string < char, std::char_traits < char>,
                        typename ContainerAllocator::template rebind<char>::other > >
                        ::stream(s, indent + "  ", v.name);
                s << indent << "year: ";
                Printer<uint8_t>::stream(s, indent + "  ", v.year);
                s << indent << "month: ";
                Printer<uint8_t>::stream(s, indent + "  ", v.month);
                s << indent << "day: ";
                Printer<uint8_t>::stream(s, indent + "  ", v.day);
                s << indent << "hour: ";
                Printer<uint8_t>::stream(s, indent + "  ", v.hour);
                s << indent << "minute: ";
                Printer<uint8_t>::stream(s, indent + "  ", v.minute);
                s << indent << "second: ";
                Printer<uint8_t>::stream(s, indent + "  ", v.second);
            }
        };

    } // namespace message_operations
} // namespace ros

#endif // CLIENT_MESSAGE_CURRENT_TIME_H
