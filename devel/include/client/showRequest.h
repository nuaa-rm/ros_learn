// Generated by gencpp from file client/showRequest.msg
// DO NOT EDIT!


#ifndef CLIENT_MESSAGE_SHOWREQUEST_H
#define CLIENT_MESSAGE_SHOWREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace client
{
template <class ContainerAllocator>
struct showRequest_
{
  typedef showRequest_<ContainerAllocator> Type;

  showRequest_()
    : request(0)
    , node_name()  {
    }
  showRequest_(const ContainerAllocator& _alloc)
    : request(0)
    , node_name(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _request_type;
  _request_type request;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _node_name_type;
  _node_name_type node_name;





  typedef boost::shared_ptr< ::client::showRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::client::showRequest_<ContainerAllocator> const> ConstPtr;

}; // struct showRequest_

typedef ::client::showRequest_<std::allocator<void> > showRequest;

typedef boost::shared_ptr< ::client::showRequest > showRequestPtr;
typedef boost::shared_ptr< ::client::showRequest const> showRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::client::showRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::client::showRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::client::showRequest_<ContainerAllocator1> & lhs, const ::client::showRequest_<ContainerAllocator2> & rhs)
{
  return lhs.request == rhs.request &&
    lhs.node_name == rhs.node_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::client::showRequest_<ContainerAllocator1> & lhs, const ::client::showRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace client

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::client::showRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::client::showRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::client::showRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::client::showRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::client::showRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::client::showRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::client::showRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e973ca7f7dd56aa9b98952611614e065";
  }

  static const char* value(const ::client::showRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe973ca7f7dd56aa9ULL;
  static const uint64_t static_value2 = 0xb98952611614e065ULL;
};

template<class ContainerAllocator>
struct DataType< ::client::showRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "client/showRequest";
  }

  static const char* value(const ::client::showRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::client::showRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 request\n"
"string node_name\n"
;
  }

  static const char* value(const ::client::showRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::client::showRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.request);
      stream.next(m.node_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct showRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::client::showRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::client::showRequest_<ContainerAllocator>& v)
  {
    s << indent << "request: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.request);
    s << indent << "node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.node_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CLIENT_MESSAGE_SHOWREQUEST_H
